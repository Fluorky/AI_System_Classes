# -*- coding: utf-8 -*-
"""SAI_lab_3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1sSNhq1uktprjxYm-lSk7Lonpb5JVjsqP
"""

import numpy as np

"""Zad 1"""

A = np.array([[2,-3,1],[4,5,0],[2,-1,3]])

B= np.array([[3,-4,-2]])

C = np.array([[2,4],[-2,1],[5,0]])

D = np.array([[3],[6],[8]])

B1= B.reshape(3,1) #najprawdopodobniej błąd w zadaniu

print(B1)

print(A*B)
#ValueError: operands could not be broadcast together with shapes (3,3) (1,4)

print(A*B1)
#ValueError: operands could not be broadcast together with shapes (3,3) (4,1)

#@print(A*C)
#ValueError: operands could not be broadcast together with shapes (3,3) (3,2)

print(A*D)

print(B*A)
#ValueError: operands could not be broadcast together with shapes (1,4) (3,3)

print(B*B1)

#print(B*C)
#ValueError: operands could not be broadcast together with shapes (1,3) (3,2)

print(B*D)

#print(C*A)
#ValueError: operands could not be broadcast together with shapes (3,2) (3,3)

#print(C*B)
#ValueError: operands could not be broadcast together with shapes (3,2) (1,3)

print(C*B1)
#ValueError: operands could not be broadcast together with shapes (3,2) (4,1)

print(C*D)

print(D*A)

print(D*B)

print(D*B1)
#alueError: operands could not be broadcast together with shapes (3,2) (4,1)

print(D*C)

"""Np.matmul"""

#print(np.matmul(A,B))
#ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 1 is different from 3)

print(np.matmul(A,B1))

print(np.matmul(A,C))

print(np.matmul(A,D))

print(np.matmul(B,A))

print(np.matmul(B,B1))

print(np.matmul(B,C))

print(np.matmul(B,D))

#print(np.matmul(C,A))
#ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 3 is different from 2)

#print(np.matmul(C,B1))
#ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 3 is different from 2)

#print(np.matmul(C,D))
#ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 3 is different from 2)

#print(np.matmul(D,A))
#ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 3 is different from 1)

print(np.matmul(D,B))

#print(np.matmul(D,B1))
#ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 3 is different from 1)

#print(np.matmul(D,C))
#ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 3 is different from 1)

"""Sprawdź czy operacja np.dot(x,y) jest tożsama z operacją np.dot np.matmul"""

print(np.dot(A,C))

print(np.matmul(A,C))

"""W przypadku której macierzy możliwe jest znalezienie macierzy odwrotnej? Znajdź
tę wartość wykorzystując odpowiednią operację z numpy.linalg
"""

np.linalg.inv(A)

try:
  if(np.linalg.inv(B)):
   print("Da sie znalezc odwrotnej B")
   print(np.linalg.inv(B))
except:
    print("nie da się")

try:
  if(np.linalg.inv(B1)):
   print("Da sie znalezc odwrotnej B1")
   print(np.linalg.inv(B1))
except:
    print("nie da się")

try:
  if(np.linalg.inv(C)):
   print("Da sie znalezc odwrotnej c")
   print(np.linalg.inv(C))
except:
    print("nie da się")

try:
  if(np.linalg.inv(D)):
   print("Da sie znalezc odwrotnej D")
   print(np.linalg.inv(D))
except:
    print("nie da się")

np.sum(A,axis=0)

np.sum(A,axis=1)

np.sum(B,axis=0)

np.sum(B,axis=1)

np.sum(B1,axis=0)

np.sum(B1,axis=1)

np.sum(C,axis=0)

np.sum(C,axis=1)

np.sum(D,axis=0)

np.sum(D,axis=1)

np.sum(A)

np.sum(B)

np.sum(B1)

np.sum(C)

np.sum(D)

"""Zadanie 2"""

D = np.array(np.arange(0,12))
D

D2=D.reshape(3,2,2)
print(D2)

D3=D.reshape(6,2,1)
print(D3)

D4=D.reshape(3, 4, 1)
print(D4)

#np.matmul(D,D2)
#ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 2 is different from 12)

#np.matmul(D,D3)
#ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 2 is different from 12)

#np.matmul(D,D4)
#ValueError: matmul: Input operand 1 has a mismatch in its core dimension 0, with gufunc signature (n?,k),(k,m?)->(n?,m?) (size 4 is different from 12)

np.matmul(D,D3.reshape(12,1))

"""Zadanie 3"""

import pandas as pd
data = pd.read_csv('simple_dataset.csv')
print(data)

s_copy = data.copy()
print(s_copy)

S1=pd.DataFrame(data=s_copy, index=[1],copy=True)
print(S1)

S2=pd.DataFrame(data=s_copy, index= [1,2],copy=True)
print(S2)

S3=pd.DataFrame(data=s_copy, index= [2,3],columns=['B','C','D'],copy=True)
print(S3)

S4=pd.DataFrame(data=s_copy,columns=['B','D'],copy=True)
print(S4)

"""Zadanie 4"""

data2 = pd.read_csv('president_heights.csv')
print(data2)

P1=pd.DataFrame(data=data2,columns=['height(cm)'],copy=True)
print(P1)

M=P1.mean()
print("Mean height")
print(M)

Std=P1.std()
print("Std")
print(Std)

Min=P1.min()
Max=P1.max()
print("Min")
print(Min)
print("Max")
print(Max)

Median=P1.median()
print("median")
print(Median)

import matplotlib.pyplot as plt
heights=P1.hist(xlabelsize=10)
#plt.hist(heights,10,color='red')
plt.title('Heights of US presidents')
plt.xlabel('Height')
plt.ylabel('Number of presidents')
plt.show()

"""Zadanie 5"""

import matplotlib.pyplot as plt

tab=np.random.normal(size=(2,1000))

plt.scatter(tab[0],tab[1])
plt.show()

number_of_points=1000
x_point = []
y_point = []
x_1=[]
y_1=[]

a=0.22
b=0.78

for i in range(number_of_points):
  x = np.random.normal(0.0,0.5)
  y = a*x+b+np.random.normal(0.0,0.1)
  x_point.append(x)
  y_point.append(y)
  x_1.append(1)
  y_1.append(1)

plt.scatter(x_point,y_point,c='b')
plt.show()

"""Zadanie 6"""

x_s=np.array(x_point)
y_s=np.array(y_point)


x2=np.sum(x_s*x_s)
x1=np.sum(x_s)
x1sum=np.sum(x_1)
y1sum=np.sum(y_1)
xy=np.sum(x_s*y_s)
y1=np.sum(y_s)

print(x1)

M = np.array([[x2,x1],[x1,x1sum]])
print(M)

M_1=np.linalg.inv(M)
print(M_1)

N=np.array([[xy],[y1]])
print(N)

a,b = np.matmul(M_1,N)
print(a,b)

plt.scatter(x_s,y_s)
plt.plot(x_s,a*x_s+b,"black")
plt.show()

"""Zadanie 7"""

import pandas as pd

california_cities = pd.read_csv('california_cities.csv')

california_cities.info()

print(california_cities)

PT =pd.DataFrame(california_cities,columns=['population_total'])
print(PT)

ATSQM =pd.DataFrame(california_cities,columns=['area_total_sq_mi'])
print(ATSQM)

ALSQM =pd.DataFrame(california_cities,columns=['area_land_sq_mi'])
print(ALSQM)

import numpy.ma as ma

np.corrcoef(PT,ATSQM)

np.corrcoef(ATSQM,rowvar = False)

np.corrcoef(ALSQM,rowvar = False)

corr_matrix = california_cities.corr()

corr_matrix["area_land_sq_mi"].sort_values(ascending=False)

corr_matrix["population_total"].sort_values(ascending=False)

corr_matrix["area_land_sq_mi"].sort_values(ascending=False)

print(california_cities.corr()["area_land_sq_mi"])

plt.scatter(PT,ATSQM)
plt.show()

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline # Wyłącznie w notatniku Jupyter

import matplotlib.pyplot as plt
california_cities.hist(bins=50, figsize=(20,15))
plt.show()